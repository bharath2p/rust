// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc --rs_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `stats.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:stats_collector.Cpu)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Cpu {
    // message fields
    ///  current CPU utilization. In percent 
    // @@protoc_insertion_point(field:stats_collector.Cpu.cpu_percent)
    pub cpu_percent: u32,
    ///  Current CPU temperation. In celcius. 
    // @@protoc_insertion_point(field:stats_collector.Cpu.temp)
    pub temp: f32,
    // special fields
    // @@protoc_insertion_point(special_field:stats_collector.Cpu.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Cpu {
    fn default() -> &'a Cpu {
        <Cpu as ::protobuf::Message>::default_instance()
    }
}

impl Cpu {
    pub fn new() -> Cpu {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cpu_percent",
            |m: &Cpu| { &m.cpu_percent },
            |m: &mut Cpu| { &mut m.cpu_percent },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "temp",
            |m: &Cpu| { &m.temp },
            |m: &mut Cpu| { &mut m.temp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Cpu>(
            "Cpu",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Cpu {
    const NAME: &'static str = "Cpu";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.cpu_percent = is.read_uint32()?;
                },
                21 => {
                    self.temp = is.read_float()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.cpu_percent != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.cpu_percent);
        }
        if self.temp != 0. {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.cpu_percent != 0 {
            os.write_uint32(1, self.cpu_percent)?;
        }
        if self.temp != 0. {
            os.write_float(2, self.temp)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Cpu {
        Cpu::new()
    }

    fn clear(&mut self) {
        self.cpu_percent = 0;
        self.temp = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Cpu {
        static instance: Cpu = Cpu {
            cpu_percent: 0,
            temp: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Cpu {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Cpu").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Cpu {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cpu {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:stats_collector.Memory)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Memory {
    // message fields
    ///  All are in Kilobytes 
    // @@protoc_insertion_point(field:stats_collector.Memory.total_memory)
    pub total_memory: u32,
    // @@protoc_insertion_point(field:stats_collector.Memory.used_memory)
    pub used_memory: u32,
    // @@protoc_insertion_point(field:stats_collector.Memory.cached)
    pub cached: u32,
    // special fields
    // @@protoc_insertion_point(special_field:stats_collector.Memory.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Memory {
    fn default() -> &'a Memory {
        <Memory as ::protobuf::Message>::default_instance()
    }
}

impl Memory {
    pub fn new() -> Memory {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_memory",
            |m: &Memory| { &m.total_memory },
            |m: &mut Memory| { &mut m.total_memory },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "used_memory",
            |m: &Memory| { &m.used_memory },
            |m: &mut Memory| { &mut m.used_memory },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cached",
            |m: &Memory| { &m.cached },
            |m: &mut Memory| { &mut m.cached },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Memory>(
            "Memory",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Memory {
    const NAME: &'static str = "Memory";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.total_memory = is.read_uint32()?;
                },
                16 => {
                    self.used_memory = is.read_uint32()?;
                },
                24 => {
                    self.cached = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.total_memory != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.total_memory);
        }
        if self.used_memory != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.used_memory);
        }
        if self.cached != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.cached);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.total_memory != 0 {
            os.write_uint32(1, self.total_memory)?;
        }
        if self.used_memory != 0 {
            os.write_uint32(2, self.used_memory)?;
        }
        if self.cached != 0 {
            os.write_uint32(3, self.cached)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Memory {
        Memory::new()
    }

    fn clear(&mut self) {
        self.total_memory = 0;
        self.used_memory = 0;
        self.cached = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Memory {
        static instance: Memory = Memory {
            total_memory: 0,
            used_memory: 0,
            cached: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Memory {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Memory").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Memory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Memory {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:stats_collector.DataCollect)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DataCollect {
    // message fields
    ///  Some dummy data, as I don't know what should be sent 
    // @@protoc_insertion_point(field:stats_collector.DataCollect.pulse)
    pub pulse: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:stats_collector.DataCollect.bp)
    pub bp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:stats_collector.DataCollect.temp)
    pub temp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:stats_collector.DataCollect.oxygen)
    pub oxygen: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:stats_collector.DataCollect.calories_burnt)
    pub calories_burnt: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:stats_collector.DataCollect.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DataCollect {
    fn default() -> &'a DataCollect {
        <DataCollect as ::protobuf::Message>::default_instance()
    }
}

impl DataCollect {
    pub fn new() -> DataCollect {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "pulse",
            |m: &DataCollect| { &m.pulse },
            |m: &mut DataCollect| { &mut m.pulse },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "bp",
            |m: &DataCollect| { &m.bp },
            |m: &mut DataCollect| { &mut m.bp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "temp",
            |m: &DataCollect| { &m.temp },
            |m: &mut DataCollect| { &mut m.temp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "oxygen",
            |m: &DataCollect| { &m.oxygen },
            |m: &mut DataCollect| { &mut m.oxygen },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "calories_burnt",
            |m: &DataCollect| { &m.calories_burnt },
            |m: &mut DataCollect| { &mut m.calories_burnt },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DataCollect>(
            "DataCollect",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DataCollect {
    const NAME: &'static str = "DataCollect";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.pulse = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.bp = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.temp = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.oxygen = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.calories_burnt = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pulse {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.bp {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.temp {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.oxygen {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.calories_burnt {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.pulse {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.bp {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.temp {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.oxygen {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.calories_burnt {
            os.write_uint32(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DataCollect {
        DataCollect::new()
    }

    fn clear(&mut self) {
        self.pulse = ::std::option::Option::None;
        self.bp = ::std::option::Option::None;
        self.temp = ::std::option::Option::None;
        self.oxygen = ::std::option::Option::None;
        self.calories_burnt = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DataCollect {
        static instance: DataCollect = DataCollect {
            pulse: ::std::option::Option::None,
            bp: ::std::option::Option::None,
            temp: ::std::option::Option::None,
            oxygen: ::std::option::Option::None,
            calories_burnt: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DataCollect {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DataCollect").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DataCollect {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DataCollect {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:stats_collector.Statistics)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Statistics {
    // message fields
    // @@protoc_insertion_point(field:stats_collector.Statistics.uuid)
    pub uuid: ::std::string::String,
    // @@protoc_insertion_point(field:stats_collector.Statistics.cpu_stats)
    pub cpu_stats: ::protobuf::MessageField<Cpu>,
    // @@protoc_insertion_point(field:stats_collector.Statistics.meory_stats)
    pub meory_stats: ::protobuf::MessageField<Memory>,
    // @@protoc_insertion_point(field:stats_collector.Statistics.data)
    pub data: ::protobuf::MessageField<DataCollect>,
    // special fields
    // @@protoc_insertion_point(special_field:stats_collector.Statistics.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Statistics {
    fn default() -> &'a Statistics {
        <Statistics as ::protobuf::Message>::default_instance()
    }
}

impl Statistics {
    pub fn new() -> Statistics {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uuid",
            |m: &Statistics| { &m.uuid },
            |m: &mut Statistics| { &mut m.uuid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Cpu>(
            "cpu_stats",
            |m: &Statistics| { &m.cpu_stats },
            |m: &mut Statistics| { &mut m.cpu_stats },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Memory>(
            "meory_stats",
            |m: &Statistics| { &m.meory_stats },
            |m: &mut Statistics| { &mut m.meory_stats },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, DataCollect>(
            "data",
            |m: &Statistics| { &m.data },
            |m: &mut Statistics| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Statistics>(
            "Statistics",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Statistics {
    const NAME: &'static str = "Statistics";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.uuid = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.cpu_stats)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.meory_stats)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.data)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uuid);
        }
        if let Some(v) = self.cpu_stats.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.meory_stats.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.uuid.is_empty() {
            os.write_string(1, &self.uuid)?;
        }
        if let Some(v) = self.cpu_stats.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.meory_stats.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Statistics {
        Statistics::new()
    }

    fn clear(&mut self) {
        self.uuid.clear();
        self.cpu_stats.clear();
        self.meory_stats.clear();
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Statistics {
        static instance: Statistics = Statistics {
            uuid: ::std::string::String::new(),
            cpu_stats: ::protobuf::MessageField::none(),
            meory_stats: ::protobuf::MessageField::none(),
            data: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Statistics {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Statistics").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Statistics {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Statistics {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bstats.proto\x12\x0fstats_collector\":\n\x03Cpu\x12\x1f\n\x0bcpu_pe\
    rcent\x18\x01\x20\x01(\rR\ncpuPercent\x12\x12\n\x04temp\x18\x02\x20\x01(\
    \x02R\x04temp\"d\n\x06Memory\x12!\n\x0ctotal_memory\x18\x01\x20\x01(\rR\
    \x0btotalMemory\x12\x1f\n\x0bused_memory\x18\x02\x20\x01(\rR\nusedMemory\
    \x12\x16\n\x06cached\x18\x03\x20\x01(\rR\x06cached\"\xd7\x01\n\x0bDataCo\
    llect\x12\x19\n\x05pulse\x18\x01\x20\x01(\rH\0R\x05pulse\x88\x01\x01\x12\
    \x13\n\x02bp\x18\x02\x20\x01(\rH\x01R\x02bp\x88\x01\x01\x12\x17\n\x04tem\
    p\x18\x03\x20\x01(\rH\x02R\x04temp\x88\x01\x01\x12\x1b\n\x06oxygen\x18\
    \x04\x20\x01(\rH\x03R\x06oxygen\x88\x01\x01\x12*\n\x0ecalories_burnt\x18\
    \x05\x20\x01(\rH\x04R\rcaloriesBurnt\x88\x01\x01B\x08\n\x06_pulseB\x05\n\
    \x03_bpB\x07\n\x05_tempB\t\n\x07_oxygenB\x11\n\x0f_calories_burnt\"\xe7\
    \x01\n\nStatistics\x12\x12\n\x04uuid\x18\x01\x20\x01(\tR\x04uuid\x126\n\
    \tcpu_stats\x18\x02\x20\x01(\x0b2\x14.stats_collector.CpuH\0R\x08cpuStat\
    s\x88\x01\x01\x12=\n\x0bmeory_stats\x18\x03\x20\x01(\x0b2\x17.stats_coll\
    ector.MemoryH\x01R\nmeoryStats\x88\x01\x01\x120\n\x04data\x18\x04\x20\
    \x01(\x0b2\x1c.stats_collector.DataCollectR\x04dataB\x0c\n\n_cpu_statsB\
    \x0e\n\x0c_meory_statsJ\xff\x08\n\x06\x12\x04\0\0\x20\x01\n\x08\n\x01\
    \x0c\x12\x03\0\0\x10\n\x08\n\x01\x02\x12\x03\x01\0\x18\n\n\n\x02\x04\0\
    \x12\x04\x04\0\t\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\x0b\n2\n\x04\
    \x04\0\x02\0\x12\x03\x06\x04\x1b\x1a%\x20current\x20CPU\x20utilization.\
    \x20In\x20percent\x20\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x06\x04\n\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03\x06\x0b\x16\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03\x06\x19\x1a\n3\n\x04\x04\0\x02\x01\x12\x03\x08\x04\x13\x1a&\
    \x20Current\x20CPU\x20temperation.\x20In\x20celcius.\x20\n\x0c\n\x05\x04\
    \0\x02\x01\x05\x12\x03\x08\x04\t\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\
    \x08\n\x0e\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x08\x11\x12\n\n\n\x02\
    \x04\x01\x12\x04\x0b\0\x10\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0b\x08\x0e\
    \n#\n\x04\x04\x01\x02\0\x12\x03\r\x04\x1c\x1a\x16\x20All\x20are\x20in\
    \x20Kilobytes\x20\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\r\x04\n\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\r\x0b\x17\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\r\x1a\x1b\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0e\x04\x1b\n\x0c\
    \n\x05\x04\x01\x02\x01\x05\x12\x03\x0e\x04\n\n\x0c\n\x05\x04\x01\x02\x01\
    \x01\x12\x03\x0e\x0b\x16\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0e\x19\
    \x1a\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x0f\x04\x16\n\x0c\n\x05\x04\x01\
    \x02\x02\x05\x12\x03\x0f\x04\n\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\
    \x0f\x0b\x11\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x0f\x14\x15\n\n\n\
    \x02\x04\x02\x12\x04\x12\0\x19\x01\n\n\n\x03\x04\x02\x01\x12\x03\x12\x08\
    \x13\nC\n\x04\x04\x02\x02\0\x12\x03\x14\x04\x1e\x1a6\x20Some\x20dummy\
    \x20data,\x20as\x20I\x20don't\x20know\x20what\x20should\x20be\x20sent\
    \x20\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03\x14\x04\x0c\n\x0c\n\x05\x04\
    \x02\x02\0\x05\x12\x03\x14\r\x13\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\
    \x14\x14\x19\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x14\x1c\x1d\n\x0b\n\
    \x04\x04\x02\x02\x01\x12\x03\x15\x04\x1b\n\x0c\n\x05\x04\x02\x02\x01\x04\
    \x12\x03\x15\x04\x0c\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x15\r\x13\n\
    \x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x15\x14\x16\n\x0c\n\x05\x04\x02\
    \x02\x01\x03\x12\x03\x15\x19\x1a\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x16\
    \x04\x1d\n\x0c\n\x05\x04\x02\x02\x02\x04\x12\x03\x16\x04\x0c\n\x0c\n\x05\
    \x04\x02\x02\x02\x05\x12\x03\x16\r\x13\n\x0c\n\x05\x04\x02\x02\x02\x01\
    \x12\x03\x16\x14\x18\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x16\x1b\x1c\
    \n\x0b\n\x04\x04\x02\x02\x03\x12\x03\x17\x04\x1f\n\x0c\n\x05\x04\x02\x02\
    \x03\x04\x12\x03\x17\x04\x0c\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03\x17\
    \r\x13\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03\x17\x14\x1a\n\x0c\n\x05\
    \x04\x02\x02\x03\x03\x12\x03\x17\x1d\x1e\n\x0b\n\x04\x04\x02\x02\x04\x12\
    \x03\x18\x04'\n\x0c\n\x05\x04\x02\x02\x04\x04\x12\x03\x18\x04\x0c\n\x0c\
    \n\x05\x04\x02\x02\x04\x05\x12\x03\x18\r\x13\n\x0c\n\x05\x04\x02\x02\x04\
    \x01\x12\x03\x18\x14\"\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03\x18%&\n\n\
    \n\x02\x04\x03\x12\x04\x1b\0\x20\x01\n\n\n\x03\x04\x03\x01\x12\x03\x1b\
    \x08\x12\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x1c\x04\x13\n\x0c\n\x05\x04\
    \x03\x02\0\x05\x12\x03\x1c\x04\n\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\
    \x1c\x0b\x0f\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x1c\x11\x12\n\x0b\n\
    \x04\x04\x03\x02\x01\x12\x03\x1d\x04\x1d\n\x0c\n\x05\x04\x03\x02\x01\x04\
    \x12\x03\x1d\x04\x0c\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03\x1d\r\x10\n\
    \x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x1d\x11\x1a\n\x0c\n\x05\x04\x03\
    \x02\x01\x03\x12\x03\x1d\x1b\x1c\n\x0b\n\x04\x04\x03\x02\x02\x12\x03\x1e\
    \x04\"\n\x0c\n\x05\x04\x03\x02\x02\x04\x12\x03\x1e\x04\x0c\n\x0c\n\x05\
    \x04\x03\x02\x02\x06\x12\x03\x1e\r\x13\n\x0c\n\x05\x04\x03\x02\x02\x01\
    \x12\x03\x1e\x14\x1f\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03\x1e\x20!\n\
    \x0b\n\x04\x04\x03\x02\x03\x12\x03\x1f\x04\x17\n\x0c\n\x05\x04\x03\x02\
    \x03\x06\x12\x03\x1f\x04\x0f\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x03\x1f\
    \x10\x14\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03\x1f\x15\x16b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(Cpu::generated_message_descriptor_data());
            messages.push(Memory::generated_message_descriptor_data());
            messages.push(DataCollect::generated_message_descriptor_data());
            messages.push(Statistics::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
