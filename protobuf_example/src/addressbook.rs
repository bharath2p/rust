// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc --rs_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `addressbook.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:tutorial.Person)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Person {
    // message fields
    // @@protoc_insertion_point(field:tutorial.Person.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:tutorial.Person.id)
    pub id: i32,
    // @@protoc_insertion_point(field:tutorial.Person.email)
    pub email: ::std::string::String,
    // @@protoc_insertion_point(field:tutorial.Person.phones)
    pub phones: ::std::vec::Vec<person::PhoneNumber>,
    // special fields
    // @@protoc_insertion_point(special_field:tutorial.Person.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Person {
    fn default() -> &'a Person {
        <Person as ::protobuf::Message>::default_instance()
    }
}

impl Person {
    pub fn new() -> Person {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Person| { &m.name },
            |m: &mut Person| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Person| { &m.id },
            |m: &mut Person| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "email",
            |m: &Person| { &m.email },
            |m: &mut Person| { &mut m.email },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "phones",
            |m: &Person| { &m.phones },
            |m: &mut Person| { &mut m.phones },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Person>(
            "Person",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Person {
    const NAME: &'static str = "Person";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                16 => {
                    self.id = is.read_int32()?;
                },
                26 => {
                    self.email = is.read_string()?;
                },
                34 => {
                    self.phones.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.id);
        }
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.email);
        }
        for value in &self.phones {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.id != 0 {
            os.write_int32(2, self.id)?;
        }
        if !self.email.is_empty() {
            os.write_string(3, &self.email)?;
        }
        for v in &self.phones {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Person {
        Person::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.id = 0;
        self.email.clear();
        self.phones.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Person {
        static instance: Person = Person {
            name: ::std::string::String::new(),
            id: 0,
            email: ::std::string::String::new(),
            phones: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Person {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Person").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Person {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Person {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Person`
pub mod person {
    // @@protoc_insertion_point(message:tutorial.Person.PhoneNumber)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PhoneNumber {
        // message fields
        // @@protoc_insertion_point(field:tutorial.Person.PhoneNumber.number)
        pub number: ::std::string::String,
        // @@protoc_insertion_point(field:tutorial.Person.PhoneNumber.type)
        pub type_: ::protobuf::EnumOrUnknown<PhoneType>,
        // special fields
        // @@protoc_insertion_point(special_field:tutorial.Person.PhoneNumber.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PhoneNumber {
        fn default() -> &'a PhoneNumber {
            <PhoneNumber as ::protobuf::Message>::default_instance()
        }
    }

    impl PhoneNumber {
        pub fn new() -> PhoneNumber {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "number",
                |m: &PhoneNumber| { &m.number },
                |m: &mut PhoneNumber| { &mut m.number },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "type",
                |m: &PhoneNumber| { &m.type_ },
                |m: &mut PhoneNumber| { &mut m.type_ },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PhoneNumber>(
                "Person.PhoneNumber",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for PhoneNumber {
        const NAME: &'static str = "PhoneNumber";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.number = is.read_string()?;
                    },
                    16 => {
                        self.type_ = is.read_enum_or_unknown()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.number.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.number);
            }
            if self.type_ != ::protobuf::EnumOrUnknown::new(PhoneType::MOBILE) {
                my_size += ::protobuf::rt::int32_size(2, self.type_.value());
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.number.is_empty() {
                os.write_string(1, &self.number)?;
            }
            if self.type_ != ::protobuf::EnumOrUnknown::new(PhoneType::MOBILE) {
                os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.type_))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PhoneNumber {
            PhoneNumber::new()
        }

        fn clear(&mut self) {
            self.number.clear();
            self.type_ = ::protobuf::EnumOrUnknown::new(PhoneType::MOBILE);
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PhoneNumber {
            static instance: PhoneNumber = PhoneNumber {
                number: ::std::string::String::new(),
                type_: ::protobuf::EnumOrUnknown::from_i32(0),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for PhoneNumber {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Person.PhoneNumber").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PhoneNumber {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for PhoneNumber {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:tutorial.Person.PhoneType)
    pub enum PhoneType {
        // @@protoc_insertion_point(enum_value:tutorial.Person.PhoneType.MOBILE)
        MOBILE = 0,
        // @@protoc_insertion_point(enum_value:tutorial.Person.PhoneType.HOME)
        HOME = 1,
        // @@protoc_insertion_point(enum_value:tutorial.Person.PhoneType.WORK)
        WORK = 2,
    }

    impl ::protobuf::Enum for PhoneType {
        const NAME: &'static str = "PhoneType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<PhoneType> {
            match value {
                0 => ::std::option::Option::Some(PhoneType::MOBILE),
                1 => ::std::option::Option::Some(PhoneType::HOME),
                2 => ::std::option::Option::Some(PhoneType::WORK),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<PhoneType> {
            match str {
                "MOBILE" => ::std::option::Option::Some(PhoneType::MOBILE),
                "HOME" => ::std::option::Option::Some(PhoneType::HOME),
                "WORK" => ::std::option::Option::Some(PhoneType::WORK),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [PhoneType] = &[
            PhoneType::MOBILE,
            PhoneType::HOME,
            PhoneType::WORK,
        ];
    }

    impl ::protobuf::EnumFull for PhoneType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Person.PhoneType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for PhoneType {
        fn default() -> Self {
            PhoneType::MOBILE
        }
    }

    impl PhoneType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<PhoneType>("Person.PhoneType")
        }
    }
}

///  Our address book file is just one of these.
// @@protoc_insertion_point(message:tutorial.AddressBook)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AddressBook {
    // message fields
    // @@protoc_insertion_point(field:tutorial.AddressBook.people)
    pub people: ::std::vec::Vec<Person>,
    // special fields
    // @@protoc_insertion_point(special_field:tutorial.AddressBook.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AddressBook {
    fn default() -> &'a AddressBook {
        <AddressBook as ::protobuf::Message>::default_instance()
    }
}

impl AddressBook {
    pub fn new() -> AddressBook {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "people",
            |m: &AddressBook| { &m.people },
            |m: &mut AddressBook| { &mut m.people },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AddressBook>(
            "AddressBook",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AddressBook {
    const NAME: &'static str = "AddressBook";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.people.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.people {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.people {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AddressBook {
        AddressBook::new()
    }

    fn clear(&mut self) {
        self.people.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AddressBook {
        static instance: AddressBook = AddressBook {
            people: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AddressBook {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AddressBook").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AddressBook {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddressBook {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11addressbook.proto\x12\x08tutorial\"\xfc\x01\n\x06Person\x12\x12\n\
    \x04name\x18\x01\x20\x01(\tR\x04name\x12\x0e\n\x02id\x18\x02\x20\x01(\
    \x05R\x02id\x12\x14\n\x05email\x18\x03\x20\x01(\tR\x05email\x124\n\x06ph\
    ones\x18\x04\x20\x03(\x0b2\x1c.tutorial.Person.PhoneNumberR\x06phones\
    \x1aU\n\x0bPhoneNumber\x12\x16\n\x06number\x18\x01\x20\x01(\tR\x06number\
    \x12.\n\x04type\x18\x02\x20\x01(\x0e2\x1a.tutorial.Person.PhoneTypeR\x04\
    type\"+\n\tPhoneType\x12\n\n\x06MOBILE\x10\0\x12\x08\n\x04HOME\x10\x01\
    \x12\x08\n\x04WORK\x10\x02\"7\n\x0bAddressBook\x12(\n\x06people\x18\x01\
    \x20\x03(\x0b2\x10.tutorial.PersonR\x06peopleJ\x92\x06\n\x06\x12\x04\0\0\
    \x19\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\
    \x11\n\n\n\x02\x04\0\x12\x04\x03\0\x14\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x03\x08\x0e\n\x0b\n\x04\x04\0\x02\0\x12\x03\x04\x02\x12\n\x0c\n\x05\x04\
    \0\x02\0\x05\x12\x03\x04\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x04\
    \t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x04\x10\x11\n0\n\x04\x04\0\x02\
    \x01\x12\x03\x05\x02\x0f\"#\x20Unique\x20ID\x20number\x20for\x20this\x20\
    person.\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x05\x02\x07\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03\x05\x08\n\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03\x05\r\x0e\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x06\x02\x13\n\x0c\n\x05\
    \x04\0\x02\x02\x05\x12\x03\x06\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\
    \x03\x06\t\x0e\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x06\x11\x12\n\x0c\n\
    \x04\x04\0\x04\0\x12\x04\x08\x02\x0c\x03\n\x0c\n\x05\x04\0\x04\0\x01\x12\
    \x03\x08\x07\x10\n\r\n\x06\x04\0\x04\0\x02\0\x12\x03\t\x04\x0f\n\x0e\n\
    \x07\x04\0\x04\0\x02\0\x01\x12\x03\t\x04\n\n\x0e\n\x07\x04\0\x04\0\x02\0\
    \x02\x12\x03\t\r\x0e\n\r\n\x06\x04\0\x04\0\x02\x01\x12\x03\n\x04\r\n\x0e\
    \n\x07\x04\0\x04\0\x02\x01\x01\x12\x03\n\x04\x08\n\x0e\n\x07\x04\0\x04\0\
    \x02\x01\x02\x12\x03\n\x0b\x0c\n\r\n\x06\x04\0\x04\0\x02\x02\x12\x03\x0b\
    \x04\r\n\x0e\n\x07\x04\0\x04\0\x02\x02\x01\x12\x03\x0b\x04\x08\n\x0e\n\
    \x07\x04\0\x04\0\x02\x02\x02\x12\x03\x0b\x0b\x0c\n\x0c\n\x04\x04\0\x03\0\
    \x12\x04\x0e\x02\x11\x03\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03\x0e\n\x15\n\
    \r\n\x06\x04\0\x03\0\x02\0\x12\x03\x0f\x04\x16\n\x0e\n\x07\x04\0\x03\0\
    \x02\0\x05\x12\x03\x0f\x04\n\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x03\
    \x0f\x0b\x11\n\x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\x03\x0f\x14\x15\n\r\n\
    \x06\x04\0\x03\0\x02\x01\x12\x03\x10\x04\x17\n\x0e\n\x07\x04\0\x03\0\x02\
    \x01\x06\x12\x03\x10\x04\r\n\x0e\n\x07\x04\0\x03\0\x02\x01\x01\x12\x03\
    \x10\x0e\x12\n\x0e\n\x07\x04\0\x03\0\x02\x01\x03\x12\x03\x10\x15\x16\n\
    \x0b\n\x04\x04\0\x02\x03\x12\x03\x13\x02\"\n\x0c\n\x05\x04\0\x02\x03\x04\
    \x12\x03\x13\x02\n\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\x13\x0b\x16\n\
    \x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x13\x17\x1d\n\x0c\n\x05\x04\0\x02\
    \x03\x03\x12\x03\x13\x20!\n9\n\x02\x04\x01\x12\x04\x17\0\x19\x01\x1a-\
    \x20Our\x20address\x20book\x20file\x20is\x20just\x20one\x20of\x20these.\
    \n\n\n\n\x03\x04\x01\x01\x12\x03\x17\x08\x13\n\x0b\n\x04\x04\x01\x02\0\
    \x12\x03\x18\x02\x1d\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x18\x02\n\n\
    \x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x18\x0b\x11\n\x0c\n\x05\x04\x01\x02\
    \0\x01\x12\x03\x18\x12\x18\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x18\x1b\
    \x1cb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(Person::generated_message_descriptor_data());
            messages.push(AddressBook::generated_message_descriptor_data());
            messages.push(person::PhoneNumber::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(person::PhoneType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
